name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DATABASE_URL: 'file:./test.db'
  JWT_SECRET: 'test-jwt-secret-for-ci'

jobs:
  # Unit and Integration Tests
  unit-integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration

    - name: Run security tests
      run: npm run test:security

    - name: Run performance tests
      run: npm run test:performance

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          junit.xml

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: |
          playwright-report/
          playwright-test-results/
          
  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: |
        npx audit-ci --config .audit-ci.json || echo "Some vulnerabilities found, check report"

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Check TypeScript types
      run: npx tsc --noEmit

    - name: Generate Prisma client (for type checking)
      run: npx prisma generate

    - name: Verify build
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

  # Performance Tests (only on main branch)
  performance-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Start application
      run: |
        npm start &
        sleep 10
      env:
        PORT: 3000

    - name: Run performance audit
      run: npm run perf:audit

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          lighthouse-report.html
          performance-results/

  # Test Results Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, code-quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Unit & Integration Tests" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "test-results-18" ]; then
          echo "✅ Node.js 18 tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Node.js 18 tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "test-results-20" ]; then
          echo "✅ Node.js 20 tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Node.js 20 tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "playwright-report" ]; then
          echo "✅ E2E tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Code Quality" >> $GITHUB_STEP_SUMMARY
        echo "✅ Linting and type checking completed" >> $GITHUB_STEP_SUMMARY

  # Notify on failure (optional)
  notify-failure:
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, code-quality]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify team of test failures
      run: |
        echo "Tests failed on main branch!"
        echo "Please check the GitHub Actions logs for details."
        # Add your notification logic here (Slack, email, etc.)

# Allow manual triggering of workflow
on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance